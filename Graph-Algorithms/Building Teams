#include <bits/stdc++.h>

#ifdef LOCAL
#include "debug.h"
#else
#define deb(...) 42
#define darr(...) 42

#endif

using namespace std;

#define ll long long
#define ull unsigned long long
#define pll pair<ll,ll>
#define ld long double
#define vll vector<ll>
#define vpll vector<pair<ll, ll>>
#define vvll vector<vector<ll>>
#define vvpll vector<vector<pair<ll,ll>>>

#define MODULO 1000000007
#define MOD 1000000007

#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))

#define       forn(i,n)              for(ll i=0;i<n;i++)
#define      for1n(i,n)              for(ll i=1;i<=n;i++)
#define          all(v)              v.begin(), v.end()
#define         rall(v)              v.rbegin(),v.rend()
 
#define            pb                push_back
#define          sz(a)               (ll)a.size()
#define             mp               make_pair

void execution_time() {
	auto start = chrono::high_resolution_clock::now();
	auto stop = chrono::high_resolution_clock::now();
	auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << duration.count() << endl;
}

ll gcd(ll a, ll b)
{
	a = abs(a), b = abs(b);
	while (a != 0 && b != 0)
	{
		if (a > b)
			a %= b;
		else
			b %= a;
	}
	return a == 0 ? b : a;
}

ll lcm(ll a, ll b)
{
	return (ll)((a * b) / gcd(a, b));
}

ll n,m;
vector<bool>vis;
vector<vector<int>> g;
vector<int> color; //either 1(red) or 2(blue)

bool dfs(int u, int c, int par)  //u is vertex, c is color, p is parent of u
{
	vis[u]=true;
	color[u]=c;
	for(auto v:g[u])
	{
		if(v==par)
		{
			continue;
		}
		if(color[v]==0)
		{
			if(!dfs(v, (color[u]^3),u)) // if uncolored, then color it
			{
				return false;
			}
		}
		if(color[v]==color[u])  //if colored, check for clash of color
		{
			return false;
		}
	
	}
	return true;
}

bool color_all()
{
	for1n(i,n)
	{
		if(!vis[i])
		{
			if(!dfs(i,1,-1))
			{
				return false;
			}
		}
	}
	return true;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	ll a,b;
	cin>>n>>m;
	g.resize(n+1);
	vis.resize(n+1);
	color.resize(n+1);

	for(int i=0;i<m;i++)
	{
		cin>>a>>b;
		g[a].pb(b);
		g[b].pb(a);
	}
	bool ans=color_all();
	if(!ans)
	{
		cout<<"IMPOSSIBLE"<<endl;
		return 0;
	}
	
	for1n(i,n)
	{
		cout<<color[i]<<" ";
	}
	return 0;
}
