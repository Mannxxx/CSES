#include <bits/stdc++.h>

#ifdef LOCAL
#include "debug.h"
#else
#define deb(...) 42
#define darr(...) 42

#endif

using namespace std;

#define ll long long
#define ull unsigned long long
#define pll pair<ll,ll>
#define ld long double
#define vll vector<ll>
#define vpll vector<pair<ll, ll>>
#define vvll vector<vector<ll>>
#define vvpll vector<vector<pair<ll,ll>>>

#define MODULO 1000000007
#define MOD 1000000007

#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))

#define       forn(i,n)              for(ll i=0;i<n;i++)
#define      for1n(i,n)              for(ll i=1;i<=n;i++)
#define          all(v)              v.begin(), v.end()
#define         rall(v)              v.rbegin(),v.rend()
 
#define            pb                push_back
#define          sz(a)               (ll)a.size()
#define             mp               make_pair

void execution_time() {
	auto start = chrono::high_resolution_clock::now();
	auto stop = chrono::high_resolution_clock::now();
	auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << duration.count() << endl;
}

ll gcd(ll a, ll b)
{
	a = abs(a), b = abs(b);
	while (a != 0 && b != 0)
	{
		if (a > b)
			a %= b;
		else
			b %= a;
	}
	return a == 0 ? b : a;
}

ll lcm(ll a, ll b)
{
	return (ll)((a * b) / gcd(a, b));
}

ll n,m;
vector<int> par;
vector<int> vis;
vector<vector<int>> g;

void bfs()
{
	vis[1]=true;
	queue<int> q;
	q.push(1);
	while(!q.empty())
	{
		int u=q.front();
		q.pop();
		for(auto v:g[u])
		{
			if(!vis[v])
			{
				vis[v]=true;
				par[v]=u;
				q.push(v);
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	ll a,b;
	cin>>n>>m;
	g.resize(n+1);
	vis.resize(n+1);
	par.resize(n+1);
	for(int i=0;i<=n;i++)
	{
		par[i]=-1;
	}
	for(int i=0;i<m;i++)
	{
		cin>>a>>b;
		g[a].pb(b);
		g[b].pb(a);
	}
	bfs();

	if(par[n]==-1)
	{
		cout<<"IMPOSSIBLE";
		return 0;
	}

	int curr=n;
	stack<int>stk;
	while(curr!=-1)
	{
		stk.push(curr);
		curr=par[curr];
	}
	cout<<stk.size()<<endl;
	while(!stk.empty())
	{
		cout<<stk.top()<<" ";
		stk.pop(); 
	}
	return 0;
}
