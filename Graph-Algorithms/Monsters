#include <bits/stdc++.h>

#ifdef LOCAL
#include "debug.h"
#else
#define deb(...) 42
#define darr(...) 42

#endif
// (*Multi-source BFS*)all monsters are pushed into the queue together at timer 0 and they are processes together, else we will overwrite(re-write) some values.
// parent of starting point A are assumed {-1,-1}
// whether it can escape to this location or not
//  By this time lava has flown to the location
// boundary conditions
// also depends on the time >> a location is valid if we get there before time

using namespace std;

#define ll long long
#define ull unsigned long long
#define pll pair<ll,ll>
#define ld long double
#define vll vector<ll>
#define vpll vector<pair<ll, ll>>
#define vvll vector<vector<ll>>
#define vvpll vector<vector<pair<ll,ll>>>

#define MODULO 1000000007
#define MOD 1000000007

#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))

#define       forn(i,n)              for(ll i=0;i<n;i++)
#define      for1n(i,n)              for(ll i=1;i<=n;i++)
#define          all(v)              v.begin(), v.end()
#define         rall(v)              v.rbegin(),v.rend()
 
#define            pb                push_back
#define          sz(a)               (ll)a.size()
#define             mp               make_pair

void execution_time() {
	auto start = chrono::high_resolution_clock::now();
	auto stop = chrono::high_resolution_clock::now();
	auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << duration.count() << endl;
}

ll gcd(ll a, ll b)
{
	a = abs(a), b = abs(b);
	while (a != 0 && b != 0)
	{
		if (a > b)
			a %= b;
		else
			b %= a;
	}
	return a == 0 ? b : a;
}

ll lcm(ll a, ll b)
{
	return (ll)((a * b) / gcd(a, b));
}

int n, m;
vector<pair<int,int>> monster;  // location of monsters(Row,Column)
vector<vector<int>> g;  //graph as adjacency list >> indiacates the time taken by monsters to reach that point
map<pair<int,int>,pair<int,int>> par_mp;  // mapping parent for every move 
pair<int,int> si,se;  //starting and ending location i.e, point A and B
vector<pair<int,int>>moves = {{-1,0},{1,0},{0,1},{0,-1}}; // {U D R L}

bool isValid(int x, int y, int timer)
{
  if(x<0 or y<0 or x>=n or y>=m)
  {
    return false;
  }
  if(g[x][y] <= timer)
  {
    return false;
  }
  return true;
}
 
bool isEscape(int x, int y, int timer)
{
  if(!isValid(x,y,timer)) return false;
  if(x == 0 or y == 0 or 
    x == n-1 or y == m-1) return true;
  return false;
}
 
bool bfs()
{
  queue<pair<pair<int,int>,int>> q;
  q.push(mp(si,0));
  par_mp[si] = {-1,-1};
  while(!q.empty())
  {
    int cx = q.front().first.first;
    int cy = q.front().first.second;
    int timer = q.front().second; 
    timer++; q.pop();
    for(auto mv: moves)
    {
      int tx = cx+mv.first;
      int ty = cy+mv.second;
      if(isEscape(tx,ty,timer))
      {
       par_mp[{tx,ty}] = {cx,cy};
       se = {tx,ty}; return true; 
      }
      if(isValid(tx,ty,timer))
      {
        par_mp[{tx,ty}] = {cx,cy};
        g[tx][ty] = timer;
        q.push({{tx,ty},timer});
      }
    }
  }
  return false;
}
 
void preprocess_monsters()
{
  queue<pair<pair<int,int>,int>> q;
  for(auto m: monster)
  {
    q.push(mp(m,0));
  }
  while(!q.empty())
  {
    int cx = q.front().first.first;
    int cy = q.front().first.second;
    int timer = q.front().second; 
    timer++; q.pop();
 
    for(auto mv: moves)
    {
      int tx = cx+mv.first;
      int ty = cy+mv.second;
      if(isValid(tx,ty,timer))
      {
        g[tx][ty] = timer;
        q.push({{tx,ty},timer});
      }
    }
  }
}
 
int32_t main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> m;
  g.resize(n);
  for(int i = 0; i < n; ++i)
  {
    g[i].resize(m);
  }
 
  for(int i = 0; i < n; ++i)
  {
    for (int j = 0; j < m; ++j)
    {
      g[i][j] = INT_MAX;
    }
  }  
 
  for(int i = 0; i < n; ++i)
  {
    for (int j = 0; j < m; ++j)
    {
      char c; cin >> c;
      if(c == '#')
      {
        g[i][j] = 0;
      }
      else if(c == 'M')
      {
        g[i][j] = 0;
 
          monster.push_back({i,j});
      }
      else if(c == 'A')
      {
        g[i][j] = 0;
        si = {i,j};
      }
      else
      {
        g[i][j] = INT_MAX;
      }
    }
  }
  if(si.first == 0 or si.second == 0 or si.first == n-1 or si.second == m-1) 
  {
    cout << "YES" << endl;
    cout << 0;
    return 0;
  }
  preprocess_monsters();
 
  if(!bfs())
  {
    cout << "NO";
    return 0;
  }
  cout << "YES" << endl;
  pair<int,int> tmp = se;
  pair<int,int> tmp1 = par_mp[se];
  pair<int,int> ed = {-1,-1}; 
  vector<char> ans;
  while(tmp1 != ed)
  {
 
    if((tmp.second - tmp1.second) == 1 and (tmp.first - tmp1.first) == 0)
    {
      ans.push_back('R');
    }
    if((tmp.second - tmp1.second) == -1 and (tmp.first - tmp1.first) == 0)
    {
      ans.push_back('L');
    }
    if((tmp.second - tmp1.second) == 0 and (tmp.first - tmp1.first) == 1)
    {
      ans.push_back('D');
    }
    if((tmp.second - tmp1.second) == 0 and (tmp.first - tmp1.first) == -1)
    {
      ans.push_back('U');
    }
    tmp = par_mp[tmp];
    tmp1 = par_mp[tmp];
  }
  reverse(ans.begin(), ans.end());
  cout << ans.size() << endl;
  for(auto c: ans)
  {
    cout << c;
  }
}
